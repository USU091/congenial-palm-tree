/O 요청 후 입출력 작업이 완료된 후에야 제어가 사용자 프로그램에 넘어감
	      I/O가 끝날때까지 cpu를 낭비시킴, 매 시점 하나의 I/O만 일어날 수 있음
	-2) I/O가 시작된 후 입출력 작업이 끝나기를 기다리지 않고 제어가 사용자 프로그램에 즉시 넘어감.
** 두 경우 모두 I/O의 완료는 인터럽트로 알려줌


## 스레드(Thread) : 프로세스 내부에 cpu 수행단위가 여러개 있는 것을 Thread라고 부른다.
- "A thread(or lightweight process) is a basic unit of CPU utilization" 
- 프로세스 하나에 CPU 수행 단위만 여러개 두고 있는것을 Thread라고 한다.

## 스레드의 구성
 -program counter
 -register set
 -stack space 
 
 = 보통 프로세스가 하나 주어지면 (code, data, stack)으로 이루어진 주소공간이 독자적으로 생성된다. 이 프로세스 하나를 관리하기 위해서 운영체제 내부에 PCB를 두고 있는데 그 프로세스의 상태, ID, 프로그램 카운터, (메모리에 어느 부분 수행중인지를 아는)레지스터 등이 PCB에 존재한다.

 = CPU수행을 위해서는 코드의 어느 부분을 실행하고 있는지 가리키는 (PCB의) 프로그램 카운터가 있어야 할 것이며, CPU에서 실행하면서 메모리에 레지스터값을 세팅해놓고 실행중일것이다. 주소공간에서는 code, data부분은 쓰레드마다 공유하지만 스택공간은 각 스레드마다 별도의 스택공간을 갖게 된다. PCB에서도 PC,register는 각각 스레드마다 별도로 존재한다.

 => CPU수행을 위해 가지고 있는 위의 3개만 각각의 스레드가 독립적으로 가진 것이다. 
 
 
 ##Thread가 동료 thread와 공유하는 부분(=task)
 - code section
 - data section
 - OS resource
 => 나머지 부분은 스레드끼리 전부 공유한다. 
 
 ##전통적인 개념의 heavyweight process는 하나의 thread를 가지고 있는 task로 볼 수 있다. 
 
 
 ##Thread의 장점
 - 다중 스레드로 구성된 태스크 구조에서는 하나의 서버 스레드가 blocked(waiting) 상태인 동안에도 동일한 태스크 내의 다른 스레드가 실행(running)되어
 빠른 처리를 할 수 있다.
 - 동일한 일을 수행하는 다중 스레드가 협력하여 높은 처리율(throughput)과 성능 향상을 얻을 수 있다.
 - 스레드를 사용하면 병렬성을 높일 수 있다. (여러개의 CPU를 가진 경우, 수를 연산할때 등)
 
 1. 응답성이 빠르다.  일종의 비동기식 입출력이라고 할 수 있다.
 2. 자원을 공유한다. 만약 똑같은 일을 하는 프로그램이 여러개 있는데 별도의 프로세스를 만드는 것보다 하나의 프로세스 안에 여러개의 스레드를 만들면 자원을 효율적으로 쓰는 효과를 얻을 수 있다.  
 3. 경제성. 프로세스를 하나 만드는것은 오버헤드가 상당히 크다. 프로세스 하나에 스레드를 추가하는 것은 그렇게 오버헤드가 크지 않다.
 또한, 컨텍스트 스위치가(문맥 교환이) 일어날 때 하나의 프로세스로부터 다른 프로세스로 CPU가 넘어가는 것은 오버헤드가 상당히 크다. 프로세스 내부에서 스레드간의 CPU 스위치가 일어나는것은 간단하다. 동일한 주소공간을 쓰기 때문에 대부분의 문맥은 공유하기 때문에 좀 더 쉽다. 즉, 프로세스에서 다른 프로세스로의 문맥교환이 일어나는것보다 스레드간의 CPU를 넘기는 문맥교환이 일어나는게 더 오버헤드가 적다.
 => 위 3개는 cpu가 하나 있는 환경에서의 경우 
 
 4. cpu가 여러개 있는 아키텍쳐일 경우에 각각 스레드가 서로 다른 cpu에서 병렬적으로 일을 할 수 있다. 그러면 결과를 더 빨리 얻을 수 있는 장점이있다.
	ex. 굉장히 큰 행렬을 곱하는 연산을 하는 경우라던지..

	
##스레드를 구성할 수 있는 구현 방법 
	- 커널 스레드 : 스레드가 여러개 있다는 사실을 운영체제 커널이 알고 있다. 하나의 스레드에서 다른 스레드로 cpu가 넘어가는 것도 커널이 스케쥴링 하듯이 넘겨주게 된다.
	- 유저 스레드 : 프로세스 안에 스레드가 여러개 있다는 사실을 운영체제는 모른다. 그래서 라이브러리의 도움을 받아서 유저 프로그램이 스스로 여러개의 프로그램을 관리하는 것을 의미한다. 유저 레벨 스레드는 커널이 모르고, 커널이 볼 때는 일반적인 프로세스로 보이는데 프로세스 본인이 내부에서 cpu 수행단위를 여러개 두고 관리하는 것이기 때문에 구현 상의 제약점이 있을 수는 있다. 
	
