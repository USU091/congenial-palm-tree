##컴퓨터 시스템 구조2



#동기식 입출력( synchronous I/O)
-I/O 요청 후 입출력 작업이 완료된 후에야 제어가 사용자 프로그램에 넘어감
	*구현 방법 1
	  - I/O가 끝날 때까지 CPU를 낭비시킴
	  - 매시점 하나의 I/O만 일어날 수 있음
	*구현 방법 2
	  - I/O가 완료될 때까지 해당 프로그램에게서 CPU를 빼앗음
	  - I/O 처리를 기다리는 줄에 그 프로그램을 줄 세움
	  - 다른 프로그램에게 CPU를 줌
	  
#비동기식 입출력( asynchronous I/O)
- I/O가 시작된 후 입출력 작업이 끝나기를 기다리지 않고 제어가 사용자 프로그램에 즉시 넘어감

=> 두 경우 모두 I/O완료는 인터럽트로 알려준다.

즉 동기식 입출력은 사용자가 I/O디바이스 사용을 위해 운영체제에 제어권을 넘긴 후 I/O디바이스(ex. 읽기, 쓰기 등)컨트롤러가 일을 수행한 후 운영체제가 사용자에게
다시 제어권을 넘겨주기까지 아무 작업도 하지 않고 holding상태로 있는 것을 동기식 입출력이라고 한다.
반면, 비동기식 입출력은 사용자가 I/O디바이스 사용을 위해 운영체제에 제어권을 넘긴 후 I/O디바이스 컨트롤러가 일을 수행하고 있는 중에도 사용자는 다시 제어권을 
가져와 다른 I/O 디바이스의 작업이 끝나지 않더라도 다른 작업을 지속하고 있는 것을 비동기식 입출력이라고 한다.
이때, I/O 작업이 끝난것은 두 경우 모두 인터럽트로 알려주게 된다. 


이 두 개의 I/O가 어떤 의미를 가지는가 ?
->ex) 디스크에 있는 정보를 가져와야지만 다음 작업을 할 수 있는게 보통이다. 



#DMA (Direct Memory Access)
- 빠른 입출력 장치를 메모리에 가까운 속도로 처리하기 위해 사용
- CPU의 중재 없이 device controller가 device의 buffer storage의 내용을 메모리에 block 단위로 직접 전송
- 바이트 단위가 아니라 block 단위로 인터럽트를 발생시킴

## 서로 다른 입출력 명령어
- I/O를 수행하는 special instruction에 의해 
- Memory Mapped I/O에 의해



##저장장치 계층 구조

		Registers
		Cache Memory      ==> 휘발성 매체
		Main Memory
		
		
		
		
		
		Magnetic Disk
		Optical Disk	  ==> 비 휘발성 매체 
		Magnetic Taple
		
		
-> 위로 갈수록 속도, 비용, 휘발성이 높다.용량도 작다.


##프로그램의 실행( 메모리 load) : 프로그램이 어떻게 메모리에서 실행이 되는가 ?


physical memory			Virtual memory						File system (하드디스크, 전원 나가도 파일은 저장되어있음)

프로세스 B				 프로세스B의 독자적 주소공간							실행파일 B
						(code, data, stack)	
프로세스 A 			 프로세스A의 독자적 주소공간						실행파일 A
						(code, data, stack)	
kernel 				Kernel Address space(code, data, stack)	

Swap Area


Virtual memory = 프로세스가 실행될 때마다 갖게 되는 독자적인 메모리 주소공간
Swap Area = 메인 메모리(physical memory)의 연장공간으로 사용되는 하드디스크공간. 전원이 나가면 의미 없는 데이터이다.


메모리 주소변환(Address translation)


#커널 주소 공간의 내용을
code - 커널 코드
- 시스템콜, 인터럽트 처리 코드
-자원관리를 위한 코드
-편리한 서비스 제공을 위한 코드

data - 자료구조들이 존재함(cpu, memory, disk)등을 관리하기 위한 자료구조.
		- PCB( 프로세스 컨트롤 블럭), 시스템 안의 프로그램이 하나 돌아가면 그 프로그램을 관리하기 위한 운영체제가 하나씩 만들어짐. 그게PCB임)
stack - 운영체제도 함수 구조이기 때문에 호출, 리턴을 하는 스택 공간이 필요함
		커널 스택
		
##사용자 프로그램이 사용하는 함수
#함수  
- 사용자 정의 함수 : 자신의 프로그램에서 정의한 함수
- 라이브러리 함수 : 자신의 프로그램에서 정의하지 않고 갖다 쓴 함수, 자신의 프로그램에 실행 파일에 포함되어 있다.
- 커널 함수 : 운영체제 프로그램의 함수, 커널 함수의 호출 = 시스템 콜


##프로그램의 실행될

		




 



