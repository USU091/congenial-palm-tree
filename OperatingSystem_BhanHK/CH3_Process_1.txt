ss is a program in excution" : 프로세스는 프로그램이 실행중인 것을 의미한다.


#프로세스의 문맥(context)
1)cpu 수행 상태를 나타내는 하드웨어 문맥(특정 시점을 놓고 봣을때 이 프로세스가 어디까지 실행했고, 독자적인 주소공간을 만든다음 cpu를 잡게 되면
	- Program Counter : 코드의 어느 부분까지 실행했는가
	- 각종 Register : register가 어떤 값을 가지고 있는지
	
2) 프로세스의 주소공간(메모리 관련)
	- Code/ Data/ Stack

3) 프로세스 관련 커널 자료구조(운영체제 관련)
	- PCB(process control block) : 커널 주소공간의 Data영역에 존재
	- Kernel stack(프로세스 별로 커널스택을 별도로 둔다. 어느 프로세스의 부탁을 받고 실행하는지 매번 다르기 때문임)
		-커널 주소공간의 Stack영역에 존재
		-커널에서 함수 호출이 이루어지면 커널 스택에 관련된 정보를 저장한다.

#PCB(process control block) : 운영체제가 각 프로세스를 관리하기 위해 프로세스당 유지하는 정보
- OS가 관리상 사용하는 정보  :  Process state, Process ID
	- Scheduling information, priority
- CPU 수행 관련 하드웨어 값
	- Program counter , registers
- 메모리 관련 : Code, Data, Stack이 메모리 어디에 위치해 있는가

- 파일 관련 : 오픈중인 파일같은 리소스 관련


##문맥 교환(Context Switch)
-cpu를 한 프로세스에서 다른 프로세스로 넘겨주는 과정
-cpu가 다른 프로세스에게 넘어갈 때 운영체제는 다음을 수행한다.
	- cpu를 내어주는 프로세스의 상태를 그 프로세스의PCB에 저장
	- cpu를 새롭게 얻는 프로세스의 상태를 PCB에서 읽어옴, 하드웨어에 복사 시킴, cpu에 넘겨줌
	
- system Call이나 인터럽트 발생시 반드시 문맥 교환이 일어나는게 아니다.
	-system call, interrupt -> 사용자 프로세스로부터 cpu가 운영체제로 넘어간다
	-system call : 프로세스가 운영체제에게 요청함
	-interrupt : controller같은 장치가 cpu한테 정보 전달 목적으로 interrupt를 검
	-문맥교환은 사용자 프로세스에서 다른 사용자 프로세스로 넘어갈 때의 과정이다.
	-system call, interrupt -> 이 때도 cpu 수행 정보 등 context의 일부를 PCB에 저장함
	-하지만, 진짜 문맥교환 시에는 그 부담이 더 큼(오버헤드가 더 큼) , 문맥 교환 시 프로세스가 사용하던 캐쉬 메모리 다 지워야한다.
	

##프로세스의 상태(Process State)
-프로세스는 상태(state)가 변경되며 수행된다
	-Running : cpu를 잡고 instruction을 수행중인 상태
	-Ready : cpu를 기다리는 상태(메모리 등 다른 조건을 모두 만족하고_
	-Blocked (wait, sleep)
		-cpu를 주어도 instruction을 수행할 수 없는 상태
		-Process 자신이 요청한 event(ex. I/O)가 즉시 만족되지 않아 이를 기다리는 상태
		-ex. 디스크에서 file을 읽어와야 하는 경우
		
		
	-new: 프로세스가 생성중인 상태
	-Terminated : 수행(execution)이 끝난 상태
	
	-Suspended(stopped) : 외부적인 이유로 프로세스의 수행이 정지된 상태. 프로세스는 통째로 디스크에 swap out된다. 
		ex) 사용자가 프로그램을 일시정지 시킨 경우, 시스템이 여러가지 이유로 프로세스를 잠시 중단시킴(중기 스케쥴러)
		

##프로세스를 스케쥴링 하기 위한 큐
-Job queue : 현재 시스템 내에 있는 모든 프로세스의 집합
-Ready queue : 현재 메모리 내에 있으면서 CPU를 잡아서 실행되기를 기다리는 프로세스의 집합
-Device queue : I/O device의 처리를 기다리는 프로세스의 집합


##스케쥴러(Scheduler)
-Long-term scheduler(장기 스케쥴러 or job scheduler) : 어떤 프로세스에게 memory(및 각종 자원)을 줄지 결정
-Medium-term scheduler(중기 스케쥴러 or swapper) : 프로세스를 통째로 메모리에서 디스크로 쫓아냄(프로세스에게서 memory를 뺏는 문제)
		: 우리가 사용하는 시스템은 중기 스케쥴러로 degree of Multiprogramming 제어
