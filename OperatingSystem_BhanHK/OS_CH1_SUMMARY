S커널 뿐 아니라 부가적인 프로그램이 설치된다. 커널 뿐 아니라 최소한 필요한 유틸리티들을 포함해서 넓은 의미의 운영체제라고 한다. 
				
#운영체제의 구조
		||사용자   사용자
		||각종   소프트웨어   사용자
		||운영체제
		||하드웨어
		
#운영체제의 목적
- 운영체제는 컴퓨터 시스템의 자원을 효율적으로 관리하는 것이 목적이다.
- 운영체제는 주어진 자원으로 최대한의 성능을 내도록 하는것이다. (프로세서, 기억장치, 입출력 장치 등을 관리)
- 운영체제는 사용자간의 형평성 있는 자원을 분배하는 것이 목적이다. 또한 사용자 및 운영체제의 보호도 해야한다. 

#운영체제의 역할
- ex)3명이 하나의 컴퓨터에서 동시에 여러개의 프로그램을 실행한다. 하지만 자기만 쓰고 있다고 생각하도록 도와주는 것이 운영체제의 역할이다.
- CPU라는 자원은 굉장히 작업 처리 속도가 빠른 자원이다. 아주 짧은 시간 간격으로 여러개의 프로그램마다 할당을 주고, 다음 프로그램에 할당을 하고, 또 다음 프로그램으로 할당하고.. 
	이런식으로 계속 반복한다. 이걸 사람이 느끼기에는 자기 프로그램만 CPU를 점유해서 쓰는 것 같은 착각을 주는 것이 운영체제의 역할이다. 

#운영체제의 분류
1)동시 작업 가능 여부
	- 단일 작업 : 하나의 작업만을 수행한다. 
	- 다중 작업
	->동시에 두 개 이상의 작업을 처리하는 것을 사용중이다. 


2) 사용자의 수
	- 단일 사용자
	-> 윈도우 같은 경우는 여러명이 동시에 하나의 컴퓨터에 접속해서 작업을 하기 어렵다고 판단되었지만 요즘은 프로그램이 좀 많이 발전하여 사용할 수 있다고 한다.
	
	- 다중 사용자 : 여러 사용자의 계정을 만들어서 동시 작업할 수 있느냐 없느냐가 나눠진다.
3) 처리 방식
	- 일괄 처리 : 작업 요청의 일정량을 모아서 한꺼번에 처리한다.

	- 시분할 : 여러 작업을 수행할 때 컴퓨터 처리 능력을 일정한 시간 단위로 분할하여 사용한다. 우리가 쓰는 것.
			일괄 처리 시스템에 비해 짧은 응답 시간을 가짐.예) unix
			interactive한 방식


- 실시간 : 정해진 시간 안에 어떠한 일이 반드시 종료됨이 보장되어야 하는 실시간 시스템을 위한 os이다.
		ex) 원자로/공장 제어, 미사일 제어, 반도체 장비, 로보트 제어. 정확한 시간을 맞추어서 처리되어야 하는 정교한 시스템을 의미한다.

		hard realtime system  --> 반도체는 정전 사태가 한 번 나면 공정이 하루씩 밀려서 나오게 된다. 
		soft realtime system  --> 영화 프레임 디코딩해주는 것 비교적 엄격하지 않다.

##몇 가지 용어

멀티 태스킹 -> 여러 작업이 동시에 수행하는 것을 의미함.
멀티 프로그래밍 -> 메모리에 여러 프로그램이 동시에 올라가 있는것을 의미함.
타임 쉐어링 -> 시간을 공유해서 쓰는 방식인데, 아무래도 CPU를 강조한다. 멀티 태스킹과 비슷하다.

**멀티 프로세서 -> 하나의 컴퓨터에 CPU(processor)가 여러 개 붙어 있음을 의미한다.


#운영체제의 예
-유닉스
-윈도우

#운영 체제의 구조
	||cpu
	||memory
	||disk    I/O device


*cpu : 누구한테 CPU를 줄까 ? 이걸 CPU 스케쥴링이라고 한다. 

*memory : 한정된 메모리를 어떻게 쪼개어 쓰지 ? 메모리 관리라고 한다.
		원활하게 실행하기 위해서 메모리에 너무 많은 프로그램을 동시에 올려놓는것보다는 , 프로그램 하나가 꼭 필요한 메모리만큼은 지원해주겠다는 것이다.
		디스크에서 뭔가 새로운 걸 메모리에 올리려면 하던걸 쫓아내야 한다. 그건 cpu에서 사용하지 않을것 같은 것을 예측하여 관리한다. 

*Disk : 디스크에 파일을 어떻게 보관하지 ? 이걸 파일관리라고 한다. 디스크의 특성에 맞게 파일을 관리하고 스케쥴링을 한다. 디스크는 헤드가 움직이면서
		데이터를 쓰기 때문에 헤드의 이동을 줄이는 방법을 쓰기도 한다. 즉, 먼저 들어왓다고 먼저 처리해주지 않는다는 것이다. 엘레베이터에 가깝다. 

*I/O device : 각기  다른 입출력장치와 컴퓨터 간에 어떻게 정보를 주고 받게 하지 ? 이를 입출력 관리라고 한다.
			기본적으로 I/O디바이는 컴퓨터 CPU보다 느리다. 그래서 I/O디바이스와 컴퓨터 내부(CPU)와 교신하면서 처리해야 하는데 워낙 장치가 느리기 
			때문에 이 I/O 디바이스와 컴퓨터 CPU와 정보를 주고 받는 것을 어떻게 할 것인지가 중요한 이슈이다. 이걸 입출력 관리라고 한다. 
			기본적으로 입출력관리는 인터럽트로 관리하고 있다.  인터럽트라는 것은 CPU는 워낙 장치가 빠르기 때문에 항상 자기 할 작업을 수행중에 있다.
			그래서 평소에는 I/O디바이스 장치가 무엇을 하던지 관여하지 않고 CPU가 해야 할 작업을 한다. 그러다 I/O 장치가 CPU에게 뭔가 보고해야 되는
			일이 있을때 인터럽트라는 것을 걸어서 cpu에게 알려주면 cpu는 다음 작업을 하기 전에 판단하여 I/O장치가 맡긴 작업을 처리해주는것이다.
			그래서 CPU가 최대한 방해받지 않고 작업을 수행할 수 있도록 한다. 
			
			
			
*프로세스관리 : 하드웨어 관리가 아닌 소프트웨어 프로그램들을 운영체제가 어떻게 관리할 것인가 ? 
			- 프로세스의 생성과 삭제
			- 자원할당 및 반환
			- 프로세스 간 협력

*그외 :
		- 보호 시스템 ( 운영체제를 보호)
		- 네트워킹
		- 명령어 해석기(command line interpreter)

#운영체제 과목의 수강 태도
-OS 사용자 관점이 아니라 OS 개발자 관점에서 수강해야 한다. 
왜냐하면 대부분의 알고리즘은 OS 프로그램 자체의 내용이다. 
인간의 신체가 뇌의 통제를 받듯 컴퓨터 하드웨어는 운영체제의 통제를 받으며 그 운영체제는 사람이 프로그래밍 하는 것이다. 
본인을 Window10이나 LINUX같은 운영체제라고 생각하고 본인의 할 일이 무엇인지를 생각해보면서 운영체제를 공부해야 한다.

